# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/reviews', type: :request do
  let(:user) { create(:user) }
  let(:movie) { create(:movie) }

  before do
    login(user)
    get movie_url(movie)
  end

  describe 'POST /create' do
    let(:review) { build(:review) }

    context 'with valid parameters' do
      it 'creates a new Review' do
        expect {
          post movie_reviews_url(movie), params: { review: { comment: review.comment, score: review.score } }
        }.to change(Review, :count).by(1)
      end


      it 'redirects to the movie' do
        post movie_reviews_url(movie), params: { review: { comment: review.comment, score: review.score, user: user.id } }
        expect(response).to redirect_to(movie_path(movie.id))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Review' do
        expect {
          post movie_reviews_url(movie), params: { review: { comment: nil, score: review.score, user: user.id } }
        }.to change(Review, :count).by(0)
      end
    end
  end

  describe 'GET /edit' do
    let(:review) { create(:review, user: user, movie: movie) }

    it 'render a successful response' do
      get edit_movie_review_url(movie, review)
      expect(response).to be_successful
    end
  end

  describe 'PATCH /update' do
    let(:review) { create(:review, user: user, movie: movie) }

    context 'with valid parameters' do
      it 'updates the requested review' do
        patch movie_review_url(movie, review), params: { review: { comment: 'new comment', score: 1 } }
        review.reload
      end

      it 'redirects to the movie' do
        patch movie_review_url(movie, review), params: { review: { comment: 'new comment', score: 1 } }
        review.reload
        expect(response).to redirect_to(movie_url(movie))
      end
    end
  end

  describe 'DELETE /destroy' do
    let(:review) { create(:review, user: user, movie: movie) }

    it 'destroys the requested review' do
      expect {
        delete movie_review_url(movie, review)
      }.to change(Review, :count).by(0)
    end

    it 'redirects to the reviews list' do
      delete movie_review_url(movie, review)
      expect(response).to redirect_to(movie_url(movie))
    end
  end
end
